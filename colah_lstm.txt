understanding lstm networks  colahs blogtoggle navigationcolahs blogunderstanding lstm networksposted on august  recurrent neural networkshumans don’t start their thinking from scratch every second as you read this essay you understand each word based on your understanding of previous words you don’t throw everything away and start thinking from scratch again your thoughts have persistencetraditional neural networks can’t do this and it seems like a major shortcoming for example imagine you want to classify what kind of event is happening at every point in a movie it’s unclear how a traditional neural network could use its reasoning about previous events in the film to inform later onesrecurrent neural networks address this issue they are networks with loops in them allowing information to persistrecurrent neural networks have loopsin the above diagram a chunk of neural networka looks at some inputxtand outputs a valueht a loop allows information to be passed from one step of the network to the nextthese loops make recurrent neural networks seem kind of mysterious however if you think a bit more it turns out that they aren’t all that different than a normal neural network a recurrent neural network can be thought of as multiple copies of the same network each passing a message to a successor consider what happens if we unroll the loopan unrolled recurrent neural networkthis chainlike nature reveals that recurrent neural networks are intimately related to sequences and lists they’re the natural architecture of neural network to use for such dataand they certainly are used in the last few years there have been incredible success applying rnns to a variety of problems speech recognition language modeling translation image captioning… the list goes on i’ll leave discussion of the amazing feats one can achieve with rnns to andrej karpathy’s excellent blog postthe unreasonable effectiveness of recurrent neural networks but they really are pretty amazingessential to these successes is the use of “lstms” a very special kind of recurrent neural network which works for many tasks much much better than the standard version almost all exciting results based on recurrent neural networks are achieved with them it’s these lstms that this essay will explorethe problem of longterm dependenciesone of the appeals of rnns is the idea that they might be able to connect previous information to the present task such as using previous video frames might inform the understanding of the present frame if rnns could do this they’d be extremely useful but can they it dependssometimes we only need to look at recent information to perform the present task for example consider a language model trying to predict the next word based on the previous ones if we are trying to predict the last word in “the clouds are in thesky” we don’t need any further context – it’s pretty obvious the next word is going to be sky in such cases where the gap between the relevant information and the place that it’s needed is small rnns can learn to use the past informationbut there are also cases where we need more context consider trying to predict the last word in the text “i grew up in france… i speak fluentfrench” recent information suggests that the next word is probably the name of a language but if we want to narrow down which language we need the context of france from further back it’s entirely possible for the gap between the relevant information and the point where it is needed to become very largeunfortunately as that gap grows rnns become unable to learn to connect the informationin theory rnns are absolutely capable of handling such “longterm dependencies” a human could carefully pick parameters for them to solve toy problems of this form sadly in practice rnns don’t seem to be able to learn them the problem was explored in depth byhochreiter  germanandbengio et al  who found some pretty fundamental reasons why it might be difficultthankfully lstms don’t have this problemlstm networkslong short term memory networks – usually just called “lstms” – are a special kind of rnn capable of learning longterm dependencies they were introduced byhochreiter  schmidhuber  and were refined and popularized by many people in following workthey work tremendously well on a large variety of problems and are now widely usedlstms are explicitly designed to avoid the longterm dependency problem remembering information for long periods of time is practically their default behavior not something they struggle to learnall recurrent neural networks have the form of a chain of repeating modules of neural network in standard rnns this repeating module will have a very simple structure such as a single tanh layerthe repeating module in a standard rnn contains a single layerlstms also have this chain like structure but the repeating module has a different structure instead of having a single neural network layer there are four interacting in a very special waythe repeating module in an lstm contains four interacting layersdon’t worry about the details of what’s going on we’ll walk through the lstm diagram step by step later for now let’s just try to get comfortable with the notation we’ll be usingin the above diagram each line carries an entire vector from the output of one node to the inputs of others the pink circles represent pointwise operations like vector addition while the yellow boxes are learned neural network layers lines merging denote concatenation while a line forking denote its content being copied and the copies going to different locationsthe core idea behind lstmsthe key to lstms is the cell state the horizontal line running through the top of the diagramthe cell state is kind of like a conveyor belt it runs straight down the entire chain with only some minor linear interactions it’s very easy for information to just flow along it unchangedthe lstm does have the ability to remove or add information to the cell state carefully regulated by structures called gatesgates are a way to optionally let information through they are composed out of a sigmoid neural net layer and a pointwise multiplication operationthe sigmoid layer outputs numbers between zero and one describing how much of each component should be let through a value of zero means “let nothing through” while a value of one means “let everything through”an lstm has three of these gates to protect and control the cell statestepbystep lstm walk throughthe first step in our lstm is to decide what information we’re going to throw away from the cell state this decision is made by a sigmoid layer called the “forget gate layer” it looks athtandxt and outputs a number betweenandfor each number in the cell statect arepresents “completely keep this” while arepresents “completely get rid of this”let’s go back to our example of a language model trying to predict the next word based on all the previous ones in such a problem the cell state might include the gender of the present subject so that the correct pronouns can be used when we see a new subject we want to forget the gender of the old subjectthe next step is to decide what new information we’re going to store in the cell state this has two parts first a sigmoid layer called the “input gate layer” decides which values we’ll update next a tanh layer creates a vector of new candidate valuestildect that could be added to the state in the next step we’ll combine these two to create an update to the statein the example of our language model we’d want to add the gender of the new subject to the cell state to replace the old one we’re forgettingit’s now time to update the old cell statect into the new cell statect the previous steps already decided what to do we just need to actually do itwe multiply the old state byft forgetting the things we decided to forget earlier then we addittildect this is the new candidate values scaled by how much we decided to update each state valuein the case of the language model this is where we’d actually drop the information about the old subject’s gender and add the new information as we decided in the previous stepsfinally we need to decide what we’re going to output this output will be based on our cell state but will be a filtered version first we run a sigmoid layer which decides what parts of the cell state we’re going to output then we put the cell state throughtanhto push the values to be betweenand and multiply it by the output of the sigmoid gate so that we only output the parts we decided tofor the language model example since it just saw a subject it might want to output information relevant to a verb in case that’s what is coming next for example it might output whether the subject is singular or plural so that we know what form a verb should be conjugated into if that’s what follows nextvariants on long short term memorywhat i’ve described so far is a pretty normal lstm but not all lstms are the same as the above in fact it seems like almost every paper involving lstms uses a slightly different version the differences are minor but it’s worth mentioning some of themone popular lstm variant introduced bygers  schmidhuber  is adding “peephole connections” this means that we let the gate layers look at the cell statethe above diagram adds peepholes to all the gates but many papers will give some peepholes and not othersanother variation is to use coupled forget and input gates instead of separately deciding what to forget and what we should add new information to we make those decisions together we only forget when we’re going to input something in its place we only input new values to the state when we forget something oldera slightly more dramatic variation on the lstm is the gated recurrent unit or gru introduced bycho et al  it combines the forget and input gates into a single “update gate” it also merges the cell state and hidden state and makes some other changes the resulting model is simpler than standard lstm models and has been growing increasingly popularthese are only a few of the most notable lstm variants there are lots of others like depth gated rnns byyao et al  there’s also some completely different approach to tackling longterm dependencies like clockwork rnns bykoutnik et al which of these variants is best do the differences mattergreff et al do a nice comparison of popular variants finding that they’re all about the samejozefowicz et al tested more than ten thousand rnn architectures finding some that worked better than lstms on certain tasksconclusionearlier i mentioned the remarkable results people are achieving with rnns essentially all of these are achieved using lstms they really work a lot better for most taskswritten down as a set of equations lstms look pretty intimidating hopefully walking through them step by step in this essay has made them a bit more approachablelstms were a big step in what we can accomplish with rnns it’s natural to wonder is there another big step a common opinion among researchers is “yes there is a next step and it’s attention” the idea is to let every step of an rnn pick information to look at from some larger collection of information for example if you are using an rnn to create a caption describing an image it might pick a part of the image to look at for every word it outputs in factxuet aldo exactly this – it might be a fun starting point if you want to explore attention there’s been a number of really exciting results using attention and it seems like a lot more are around the corner…attention isn’t the only exciting thread in rnn research for example grid lstms bykalchbrenneret alseem extremely promising work using rnns in generative models – such asgregoret alchunget al orbayer  osendorfer – also seems very interesting the last few years have been an exciting time for recurrent neural networks and the coming ones promise to only be more soacknowledgmentsi’m grateful to a number of people for helping me better understand lstms commenting on the visualizations and providing feedback on this posti’m very grateful to my colleagues at google for their helpful feedback especiallyoriol vinyalsgreg corradojon shlensluke vilnis andilya sutskever i’m also thankful to many other friends and colleagues for taking the time to help me includingdario amodei andjacob steinhardt i’m especially thankful tokyunghyun chofor extremely thoughtful correspondence about my diagramsbefore this post i practiced explaining lstms during two seminar series i taught on neural networks thanks to everyone who participated in those for their patience with me and for their feedbackmore postsattention and augmented recurrent neural networkson distillconv netsa modular perspectiveneural networks manifolds and topologydeep learning nlp and representationsbuilt byoinkinawithhakyllusingbootstrapmathjaxdisqusmathboxjshighlightjs
                    andfootnotesjsenable javascript for footnotes disqus comments and other cool stuff